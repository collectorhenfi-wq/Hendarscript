-- By Hendar

local __b64 = ""
local function __decode(s)
  local b='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
  s = string.gsub(s, '[^'..b..'=]', '')
  return (s:gsub('.', function(x)
    if (x == '=') then return '' end
    local r,f = '', (b:find(x)-1)
    for i=6,1,-1 do r = r .. (f%2^i - f%2^(i-1) > 0 and '1' or '0') end
    return r
  end):gsub('%d%d%d?%d?%d?%d?%d?%d', function(x)
    if (#x ~= 8) then return '' end
    local c = 0
    for i=1,8 do c = c + (x:sub(i,i) == '1' and 2^(8-i) or 0) end
    return string.char(c)
  end))
end


-- prefer task.spawn if present (newer executors), fallback to spawn
local __spawn = (type(task) == "table" and task.spawn) or (spawn or nil)

local function __delayed_run()
  -- small safe wait to let environment initialize (avoids memory-tracking warnings)
  if type(task) == "table" and task.wait then task.wait(0.02) else pcall(function() wait(0.02) end) end

  local ok_load, chunk_or_err = pcall(function()
    local decoded = __decode(__b64)
    local loader = (loadstring or load)
    return loader and loader(decoded) or error("no loader")
  end)

  if ok_load and type(chunk_or_err) == "function" then
    pcall(chunk_or_err)
  else
    -- if decode/load failed, do nothing quietly
  end
end

if __spawn then
  __spawn(__delayed_run)
else
  -- fallback: try pcall wrapper
  pcall(__delayed_run)
end

-- Dummy small noise start
local __d0 = 0
local __d1 = 1
local __d2 = 0
local __d3 = 1
local __d4 = 0
local __d5 = 1
local __d6 = 0
local __sum = 0
for __i=1,6 do __sum = __sum + (__i % 2) end
local __rnd0 = "hendar_noise_6712"
local __rnd1 = "hendar_noise_6205"
local __rnd2 = "hendar_noise_8531"
local __rnd3 = "hendar_noise_2932"
local __rnd4 = "hendar_noise_132"
local __rnd5 = "hendar_noise_6726"
local __rnd6 = "hendar_noise_9619"
local function __noop(a) return a end
-- Dummy small noise end

-- EOF HENDAR | original=download_4.txt
